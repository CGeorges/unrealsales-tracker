tenant: cgeorges89
app: unrealsales
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  profileTableName: UnrealSalesProfiles-${self:custom.stage}
  productsTableName: UnrealSalesProducts-${self:custom.stage}
  listsTableName: UnrealSalesLists-${self:custom.stage}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 1
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
service:
  name: unrealtracker

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 256
  versionFunctions: false
  stackTags:
    project: UnrealSales
  environment:
    profileTableName: ${self:custom.profileTableName}
    productsTableName: ${self:custom.productsTableName}
    listsTableName: ${self:custom.listsTableName}
    secretsalt: somethingreallysecret!!
    JWT_EXPIRATION: 365d
    JWT_SECRET: thisisverysecret
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    # Restrict our IAM role permissions to
    # the specific table for the stage
    Resource:
      - "Fn::GetAtt": [ UnrealSalesProfiles, Arn ]
      - "Fn::GetAtt": [ UnrealSalesProducts, Arn ]
      - "Fn::GetAtt": [ UnrealSalesLists, Arn ]
region: us-east-1
functions:
  authorize:
    handler: functions/authorize.handler
  register:
    handler: functions/register.user
    events:
      - http:
          method: POST
          path: /profile/register
          cors: true
  login:
    handler: functions/login.user
    events:
      - http:
          method: POST
          path: /profile/login
          cors: true
  addProduct:
    handler: functions/products.addProduct
    events:
      - http:
          method: POST
          path: /products
          cors: true
          authorizer: 
            name: authorize
            resultTtlInSeconds: 0
  getLists:
    handler: functions/lists.getLists
    events:
      - http:
          method: GET
          path: /lists
          cors: true
          authorizer: 
            name: authorize
            resultTtlInSeconds: 0
  addToList:
    handler: functions/lists.addToList
    events:
      - http:
          method: POST
          path: /lists/products
          cors: true
          authorizer: 
            name: authorize
            resultTtlInSeconds: 0
resources:
  - ${file(resources/dynamodb-tables.yml)}